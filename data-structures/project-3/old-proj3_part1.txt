old-proj3_part1.txt

/*
#ifndef ACTOR_INCLUDED
#define ACTOR_INCLUDED

#include "GraphObject.h"
using namespace std;

class StudentWorld;

// Actor class:

class Actor: public GraphObject
{
public:
    Actor(int imageID, double startX, double startY, int startDirection, int depth, StudentWorld* myWorld, string actorType);
    virtual void doSomething() = 0;
    const int STEP = 4;
    
    
    StudentWorld* getWorld() const
    {
        return m_World;
    }
    
    string getType() const
    {
        return m_actorType;
    }
    
    bool isDead() const
    {
        return m_dead;
    }
    
    void setDead()
    {
        m_dead = true;
    }
    
private:
    bool m_dead;
    StudentWorld* m_World;
    string m_actorType;
};

// Penelope class:

class Penelope: public Actor
{
public:
    Penelope(double startX, double startY, StudentWorld* myWorld);
    virtual void doSomething();
};

// Wall class:

class Wall: public Actor
{
public:
    Wall(double startX, double startY, StudentWorld* myWorld);
    virtual void doSomething();
};

#endif // ACTOR_INCLUDED
*/

/*
#include "Actor.h"
#include "StudentWorld.h"
#include "GameConstants.h"

// Actor's implementations:

Actor::Actor(int imageID, double startX, double startY, int startDirection, int depth, StudentWorld* myWorld, string actorType) :
       GraphObject(imageID, startX, startY, startDirection, depth), m_World(myWorld), m_actorType(actorType)
{}

// Penelope's implementations:

Penelope::Penelope(double startX, double startY, StudentWorld* myWorld) :
          Actor(IID_PLAYER, startX, startY, right, 0, myWorld, "Penelope")
{}

void Penelope::doSomething()
{
    int key;
    if (getWorld()->getKey(key))
    {
        switch(key)
        {
        case KEY_PRESS_LEFT:
            setDirection(left);
            if (getWorld()->checkMove(getX() - STEP, getY(), this))
                moveTo(getX() - STEP, getY());
            break;

        case KEY_PRESS_RIGHT:
            setDirection(right);
            if (getWorld()->checkMove(getX() + STEP, getY(), this))
                moveTo(getX() + STEP, getY());
            break;

        case KEY_PRESS_UP:
            setDirection(up);
            if (getWorld()->checkMove(getX(), getY() + STEP, this))
                moveTo(getX(), getY() + STEP);
            break;

        case KEY_PRESS_DOWN:
            setDirection(down);
            if (getWorld()->checkMove(getX(), getY() - STEP, this))
                moveTo(getX(), getY() - STEP);
            break;
        }
    }
}

// Wall's implementations:

Wall::Wall(double startX, double startY, StudentWorld* myWorld) :
      Actor(IID_WALL, startX, startY, right, 0, myWorld, "Wall")
{}

void Wall::doSomething()
{}
*/